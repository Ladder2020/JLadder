package com.jladder.core.db.jdbc.impl;

import cn.hutool.core.convert.Convert;
import cn.hutool.db.Db;
import cn.hutool.db.Entity;
import cn.hutool.db.Session;
import cn.hutool.db.ds.DSFactory;
import cn.hutool.db.ds.DataSourceWrapper;
import cn.hutool.db.handler.RsHandler;
import cn.hutool.db.sql.SqlExecutor;
import KeyValue;
import Record;
import DbDifferentcs;
import DbParameter;
import SqlText;
import DbDriver;
import IBaseSupport;
import Collections;
import Core;
import Regex;
import Strings;
import Func2;
import Func3;
import Tuple2;
import LogForSql;
import Logs;

import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;
import java.util.function.Function;
import java.util.regex.Matcher;

public class BaseSupportByHu extends IBaseSupport {

    private Db db;
    private Session session;
    public BaseSupportByHu(){
        db= Db.use();
        //dialect =  DbDriver.getDialectName(((DataSourceWrapper)DSFactory.get()).getDriver());
        Connection conn=null;
        try {

            conn = db.getConnection();
            dialect =  DbDriver.getDialectName(conn);
            db.closeConnection(conn);

        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }finally {
            if(conn!=null)db.closeConnection(conn);
        }

    }
    public BaseSupportByHu(String name){
        db= Db.use(name);
        dialect =  DbDriver.getDialectName(((DataSourceWrapper)DSFactory.get(name)).getDriver());
    }
    private Record toRecordByEntity(Entity entity){
        if(entity==null)return null;
        Record record = new Record();
        entity.forEach((s, o) -> {
            if(o!=null){
                switch (o.getClass().getName()){
                    case "java.sql.Timestamp":
                        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        String str = df.format(o);
                        record.put(s,str);
                        break;
                    case "java.sql.Date":
                        record.put(s,((java.sql.Date)o).toString());
                        break;
                    default:
                        record.put(s, o);
                        break;
                }
            }else  record.put(s, o);


        });
        return record;
    }

    @Override
    public List<Record> query(SqlText sqltext) {
        return query(sqltext,true,null);
    }

    @Override
    public List<Record> query(SqlText sqltext, boolean serialize, Func2<Record, Boolean> callback) {
        List<Record> ret = new ArrayList<Record>();
        LogForSql log = new LogForSql(sqltext).setTag(tag).setConn(maskcode);
        try {
            Db db = Strings.isBlank(maskcode)?Db.use():Db.use(maskcode);
            List<Entity> rs = db.query(sqltext.getCmd(), sqltext.getMap());
            if(rs==null)return null;
            rs.forEach(x->{
                Record record = toRecordByEntity(x);
                try {
                    if(callback==null || callback.invoke(record))ret.add(record);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });
            log.setEnd();
            return ret;
        } catch (SQLException throwables) {
            error=throwables.getMessage();
            log.setEnd(true).setCause(error);
            return null;
            //throwables.printStackTrace();
        }finally {
            Logs.writeSql(log);
        }
    }

    @Override
    public List<List<Record>> querys(SqlText sqlcmd, Collection<DbParameter> dbParameters, Function<Record, Boolean> callback) {
        throw Core.makeThrow("未实现");
    }

    @Override
    public <T> List<T> query(SqlText sqltext,Class<T> clazz, Func2<T, Boolean> callback) {
        List<T> ret = new ArrayList<T>();
        LogForSql log = new LogForSql(sqltext).setTag(tag).setConn(maskcode);
        try {
            List<Entity> rs = Db.use(maskcode).query(sqltext.getCmd(), sqltext.getMap());
            if(rs==null)return null;
            rs.forEach(x->{
                T t = x.toBean(clazz);
                //Record record = toRecordByEntity(x);
                try {
                    if(callback==null || callback.invoke(t))ret.add(t);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });
            log.setEnd();
            return ret;
        } catch (SQLException throwables) {
            throwables.printStackTrace();
            error=throwables.getMessage();
            log.setEnd(true).setCause(error);
            return null;
        }
        finally {
            Logs.writeSql(log);
        }
    }

    @Override
    public <T> T getValue(SqlText sqltext,Class<T> clazz) {
        LogForSql log = new LogForSql(sqltext).setTag(tag).setConn(maskcode);
        try {
            T data =  Db.use(maskcode).query(sqltext.getCmd(),(RsHandler<T>) new RsHandler<T>() {
                @Override
                public T handle(ResultSet resultSet) throws SQLException {
                    if(resultSet.next()){
                        if(clazz==String.class)return (T)resultSet.getString(1);
                        if(clazz==Integer.class)return (T)Integer.valueOf(resultSet.getInt(1));
                        if(clazz==Long.class)return (T)Long.valueOf(resultSet.getLong(1));
                        else {
                            return (T) Convert.convert(clazz,resultSet.getString(1));
                        }
                        //return  (T)resultSet.getObject(1);
                    }
                    else{
                        if(clazz.equals(Integer.class)||clazz.equals(Long.class)) return (T)((Object) 0);
                        return null;
                    }

                }
            },sqltext.getMap());
            log.setEnd();
            return data;
        } catch (SQLException throwables) {
            throwables.printStackTrace();
            error=throwables.getMessage();
            log.setEnd(true).setCause(error);
            if(clazz.equals(Integer.class))return (T)((Object) (-1));
            if(clazz.equals(Long.class))return (T)((Object) (-1));
        }
        finally {
            log.write();
        }
        return Convert.convert(clazz,null);
    }

    @Override
    public <T> List<T> getValues(SqlText sqltext,Class<T> clazz) {
        KeyValue<String,Object[]> sql = sqltext.getSql();
        List<T> data = null;
        LogForSql log = new LogForSql(sqltext).setTag(tag).setConn(maskcode);
        try {
            data = Db.use(maskcode).query(sql.key,clazz,sql.value);
            log.setEnd();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
            error=throwables.getMessage();
            log.setEnd(true).setCause(error);
        }finally {
            log.write();
        }
        return data;
    }

    @Override
    public List<Record> getTables(String schemaName, String tableName) {
        return null;
    }

    /***
     * 表是否存在
     * @param tableName 表名
     * @return
     */
    @Override
    public boolean exists(String tableName) {
        String  sql = "SELECT COUNT(1) FROM " + tableName + " where 1!=1";
        int count = getValue(new SqlText(sql),int.class);
        return count >= 0;
    }

    @Override
    public int exec(SqlText sqltext) {
        return exec(sqltext,null);
    }

    @Override
    public int exec(SqlText sqltext, Func3<Integer, Connection, Integer> callback) {
        KeyValue<String,Object[]> sql = sqltext.getSql();
        LogForSql log = new LogForSql(sqltext).setTag(tag).setConn(maskcode);
        try {
            Connection conn = null;
            int rows;
            boolean autocreate = false;
            try {

                if(session!=null){
                    conn = session.getConnection();
                    autocreate = true;
                }else{
                    conn = db.getConnection();
                }
                rows = SqlExecutor.execute(conn, sql.key, sql.value);
                if(callback!=null) {
                    try {
                        rows = callback.invoke(rows,conn);
                    } catch (Exception e) {
                        e.printStackTrace();
                        error=e.getMessage();
                        log.setEnd(true).setCause(error);
                    }
                }
                log.setEnd();
            } finally {
                if(autocreate)db.closeConnection(conn);
                log.write();
            }
            return rows;
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }

        return -1;
    }

    public List<Object> pro(String name,List<DbParameter> parameters){
        List<Object> ret = new ArrayList<Object>();
        Connection  conn =null;
        CallableStatement stmt=null;
        try {
            conn =  db.getConnection();
            //int count = Collections.count(parameters,x->!x.out);
            stmt = conn.prepareCall("call " + name + "("+String.join(",", java.util.Collections.nCopies(parameters.size(), "?"))+")");
            int index = 1;
            //int index_out = 1;
            for(DbParameter p : parameters){

                if(!p.out){
                    switch (p.type){

                        case Number:
                            stmt.setInt(index,(int)p.value);
                            break;
                        default:
                            stmt.setString(index,(String)p.value);
                            break;
                    }
                }else{
                    switch (p.type){
                        case Number:
                            stmt.registerOutParameter(index, Types.INTEGER);
                            break;
                        default:
                            stmt.registerOutParameter(index, Types.VARCHAR);
                            break;
                    }

                }
                index++;
            }
            stmt.execute();
            index=1;
            for(DbParameter p : parameters){
                if(p.out){
                    switch (p.type){
                        case Number:
                            ret.add(stmt.getInt(index));
                            break;
                        default:
                            ret.add(stmt.getString(index));
                            break;
                    }
                }
                index++;
            }
        } catch (SQLException throwables) {
            throwables.printStackTrace();
            return null;
        }
        finally {
            if(stmt!=null) {
                try {
                    stmt.close();
                } catch (SQLException throwables) {
                    throwables.printStackTrace();
                }
            }
            if(conn!=null)db.closeConnection(conn);

        }
        return ret;
    }


    public boolean beginTrain(){
        if(session!=null)return true;
        session = Session.create(maskcode);
        try {
            session.beginTransaction();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
        return true;
    }
    public void rollback(){
        session.quietRollback();
        session=null;
    }
    public boolean commitTran(){
        try {
            session.commit();
            session=null;
            return true;
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
        return false;
    }
    @Override
    public List<Map<String,Object>> getFieldInfo(String tableName){
        Connection conn = null;
        List<Map<String,Object>> ret = new ArrayList<>();
        ResultSet rs=null;
        try{

            conn =  db.getConnection();
            PreparedStatement pre = conn.prepareStatement(Regex.isMatch(tableName, "^\\s*select\\b")?
                     tableName :"select * from "+tableName+" where 1<>1");
            rs = pre.executeQuery();

            String[] ts = Regex.split(tableName, "\\s*(?i)join\\s*");
            
            long count = rs.getMetaData().getColumnCount();
            ResultSetMetaData meta = rs.getMetaData();
            Record dic = new Record();
            for (int i = 0; i < count; i++) {
                Record map = new Record();
                String countName = meta.getColumnLabel(i + 1);
                map.put("fieldname", countName);
                map.put("name", meta.getColumnName(i+1));
                map.put("type", DbDifferentcs.MappingType(meta.getColumnClassName(i+1).replace("java.lang.","").toLowerCase()));
                map.put("table",meta.getTableName(i + 1));
                map.put("schema",meta.getCatalogName(i + 1));

                //如果有级联的情况
                if (ts.length > 1)
                {
                    String tn = meta.getTableName(i + 1);
                    String key = dic.haveKey(tn);
                    if (Strings.isBlank(key))
                    {
                        Tuple2<Boolean, String> first = Collections.first(Arrays.asList(ts), x -> Regex.isMatch(" " + x + " ", "[\\s\\.]" + tn + "\\s"));
                        Matcher match = Regex.match(" " + first.item2 + " ", "[\\s\\.]+" + tn + "\\s+(\\w+)\\s+");
                        if (match.find())
                        {
                            String asname = match.group(1);
                            //                            newdic.Put("name", asname + "." + r["ColumnName"].ToString().ToLower());
                            map.put("fieldname", asname + "." + meta.getColumnName(i+1));
                            map.put("as", asname + meta.getColumnName(i+1));
                            dic.put(tn, asname);
                        }
                    }
                    else
                    {
                        String asname = dic.getString(key);
                        map.put("name", asname + "." + meta.getColumnName(i+1));
                        map.put("fieldname", asname + "." + meta.getColumnName(i+1));
                        map.put("as", asname + meta.getColumnName(i+1));
                    }
                }
                ret.add(map);
            }
            rs.close();
            pre.close();
            return ret;

        }catch (Exception e){
            e.printStackTrace();
            error=e.getMessage();
            return null;
        }
        finally {
            if(rs!=null) {
                try {
                    rs.close();
                } catch (SQLException throwables) {
                    throwables.printStackTrace();
                }
            }
            if(conn!=null)db.closeConnection(conn);

        }



        //throw Core.makeThrow("未实现");

    }
}
